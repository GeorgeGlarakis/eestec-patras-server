# User/group nginx will run under
user nginx nginx;

# We have 2 cores, so that makes sense
worker_processes 2;

# We don't need to change any defaults here, but we need to have the empty
# entry anyway
events {
}

http {
    # Make nginx aware of the different mime types
    include /etc/nginx/mime.types;

    # Activate the log
    access_log on;

    # Output the logs on stdout/stderr so they can be viewed by 'docker logs'
    error_log /dev/stderr warn;
    access_log /dev/stdout combined;

    # That's the least specific, official mime type, so we use it as a default
    default_type application/octet-stream;

    # Instruct the TCP stack not to wait until we can fill a whole packet
    # (which almost never happens) and send the data immediately
    tcp_nodelay on;

    # Pretty much the opposite of tcp_nodelay, waits until a packet is full
    # before sending it.
    tcp_nopush on;

    # Huh? Why activate both if they mean the opposite? Because we also turn
    # sendfile on. Sendfile allows zero-copy transfers by doing the read/write
    # in kernel space. If both, tcp_nopush and tcp_nodelay are on, when
    # sending a file, it will first make sure that packets are full because of
    # tcp_nopush, but once it reaches the end of the file, it deactivates
    # tcp_nopush and tcp_nodelay kicks in, sending the last packet
    # immediately.
    sendfile on;

    # Path to the configurations of all active sites
    include /etc/nginx/sites-enabled/*;
}
